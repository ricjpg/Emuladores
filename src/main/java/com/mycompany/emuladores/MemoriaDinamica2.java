/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.emuladores;

import javax.swing.JOptionPane;

/**
 *
 * @author HTS
 */
public class MemoriaDinamica2 extends javax.swing.JFrame {

    /**
     * Creates new form MemoriaDinamica2
     */
    int procesoCarga;
    int ultimoEspacioCargado;
    int procesosTotales;

    public MemoriaDinamica2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        rdbPrimerAjuste = new javax.swing.JRadioButton();
        rdbMejorAjuste = new javax.swing.JRadioButton();
        rdbSiguienteAjuste = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnCargarProceso = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblTamanioMemoria = new javax.swing.JLabel();
        panelEspacioMemoria1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        jProgressBar3 = new javax.swing.JProgressBar();
        jProgressBar4 = new javax.swing.JProgressBar();
        jProgressBar5 = new javax.swing.JProgressBar();
        jProgressBar6 = new javax.swing.JProgressBar();
        jProgressBar7 = new javax.swing.JProgressBar();
        jProgressBar8 = new javax.swing.JProgressBar();
        jProgressBar9 = new javax.swing.JProgressBar();
        jProgressBar10 = new javax.swing.JProgressBar();
        btnLiberarMemoria = new javax.swing.JButton();
        btnRegresarMenu = new javax.swing.JButton();
        panelEspacioMemoria2 = new javax.swing.JPanel();
        lblEspacio1 = new javax.swing.JLabel();
        lblEspacio2 = new javax.swing.JLabel();
        lblEspacio3 = new javax.swing.JLabel();
        lblEspacio4 = new javax.swing.JLabel();
        lblEspacio5 = new javax.swing.JLabel();
        lblEspacio6 = new javax.swing.JLabel();
        lblEspacio7 = new javax.swing.JLabel();
        lblEspacio8 = new javax.swing.JLabel();
        lblEspacio9 = new javax.swing.JLabel();
        lblEspacio10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnLiberar1 = new javax.swing.JButton();
        btnLiberar2 = new javax.swing.JButton();
        btnLiberar3 = new javax.swing.JButton();
        btnLiberar4 = new javax.swing.JButton();
        btnLiberar5 = new javax.swing.JButton();
        btnLiberar6 = new javax.swing.JButton();
        btnLiberar7 = new javax.swing.JButton();
        btnLiberar8 = new javax.swing.JButton();
        btnLiberar9 = new javax.swing.JButton();
        btnLiberar10 = new javax.swing.JButton();
        panelEspacioMemoria3 = new javax.swing.JPanel();
        lblEspacio11 = new javax.swing.JLabel();
        lblEspacio12 = new javax.swing.JLabel();
        lblEspacio13 = new javax.swing.JLabel();
        lblEspacio14 = new javax.swing.JLabel();
        lblEspacio15 = new javax.swing.JLabel();
        lblEspacio16 = new javax.swing.JLabel();
        lblEspacio17 = new javax.swing.JLabel();
        lblEspacio18 = new javax.swing.JLabel();
        lblEspacio19 = new javax.swing.JLabel();
        lblEspacio20 = new javax.swing.JLabel();
        txtTamanioProceso = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        rdbPrimerAjuste.setSelected(true);
        rdbPrimerAjuste.setText("Primer ajuste");
        rdbPrimerAjuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbPrimerAjusteActionPerformed(evt);
            }
        });

        rdbMejorAjuste.setText("Mejor ajuste");
        rdbMejorAjuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbMejorAjusteActionPerformed(evt);
            }
        });

        rdbSiguienteAjuste.setText("Siguiente ajuste");
        rdbSiguienteAjuste.setToolTipText("");
        rdbSiguienteAjuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbSiguienteAjusteActionPerformed(evt);
            }
        });

        jLabel6.setText("Elegir particionamiento");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rdbPrimerAjuste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(94, 94, 94))
                            .addComponent(rdbMejorAjuste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rdbSiguienteAjuste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(88, 88, 88))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdbPrimerAjuste)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbMejorAjuste)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdbSiguienteAjuste)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Memoria Dinámica");

        btnCargarProceso.setText("Cargar");
        btnCargarProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarProcesoActionPerformed(evt);
            }
        });

        jLabel3.setText("Tamaño de la memoria");

        jLabel5.setText("Cargar proceso");

        lblTamanioMemoria.setText("256MB");

        panelEspacioMemoria1.setBackground(new java.awt.Color(255, 204, 153));

        javax.swing.GroupLayout panelEspacioMemoria1Layout = new javax.swing.GroupLayout(panelEspacioMemoria1);
        panelEspacioMemoria1.setLayout(panelEspacioMemoria1Layout);
        panelEspacioMemoria1Layout.setHorizontalGroup(
            panelEspacioMemoria1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEspacioMemoria1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEspacioMemoria1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar8, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(jProgressBar7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelEspacioMemoria1Layout.setVerticalGroup(
            panelEspacioMemoria1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEspacioMemoria1Layout.createSequentialGroup()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnLiberarMemoria.setText("LiberarMemoria");
        btnLiberarMemoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberarMemoriaActionPerformed(evt);
            }
        });

        btnRegresarMenu.setLabel("Regresar");
        btnRegresarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarMenuActionPerformed(evt);
            }
        });

        lblEspacio1.setToolTipText("");

        lblEspacio2.setToolTipText("");

        lblEspacio3.setToolTipText("");

        lblEspacio4.setToolTipText("");

        lblEspacio10.setMaximumSize(new java.awt.Dimension(37, 20));
        lblEspacio10.setMinimumSize(new java.awt.Dimension(37, 20));

        btnLiberar1.setText("Liberar");
        btnLiberar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar1ActionPerformed(evt);
            }
        });

        btnLiberar2.setText("Liberar");
        btnLiberar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar2ActionPerformed(evt);
            }
        });

        btnLiberar3.setText("Liberar");
        btnLiberar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar3ActionPerformed(evt);
            }
        });

        btnLiberar4.setText("Liberar");
        btnLiberar4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar4ActionPerformed(evt);
            }
        });

        btnLiberar5.setText("Liberar");
        btnLiberar5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar5ActionPerformed(evt);
            }
        });

        btnLiberar6.setText("Liberar");
        btnLiberar6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar6ActionPerformed(evt);
            }
        });

        btnLiberar7.setText("Liberar");
        btnLiberar7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar7ActionPerformed(evt);
            }
        });

        btnLiberar8.setText("Liberar");
        btnLiberar8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar8ActionPerformed(evt);
            }
        });

        btnLiberar9.setText("Liberar");
        btnLiberar9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar9ActionPerformed(evt);
            }
        });

        btnLiberar10.setText("Liberar");
        btnLiberar10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLiberar8)
                    .addComponent(btnLiberar7)
                    .addComponent(btnLiberar6)
                    .addComponent(btnLiberar5)
                    .addComponent(btnLiberar4)
                    .addComponent(btnLiberar3)
                    .addComponent(btnLiberar2)
                    .addComponent(btnLiberar1)
                    .addComponent(btnLiberar9)
                    .addComponent(btnLiberar10))
                .addGap(0, 29, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(btnLiberar10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(btnLiberar9)
                .addGap(28, 28, 28)
                .addComponent(btnLiberar1)
                .addGap(18, 18, 18)
                .addComponent(btnLiberar2)
                .addGap(28, 28, 28)
                .addComponent(btnLiberar3)
                .addGap(18, 18, 18)
                .addComponent(btnLiberar4)
                .addGap(26, 26, 26)
                .addComponent(btnLiberar5)
                .addGap(26, 26, 26)
                .addComponent(btnLiberar6)
                .addGap(18, 18, 18)
                .addComponent(btnLiberar7)
                .addGap(26, 26, 26)
                .addComponent(btnLiberar8)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout panelEspacioMemoria2Layout = new javax.swing.GroupLayout(panelEspacioMemoria2);
        panelEspacioMemoria2.setLayout(panelEspacioMemoria2Layout);
        panelEspacioMemoria2Layout.setHorizontalGroup(
            panelEspacioMemoria2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEspacioMemoria2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEspacioMemoria2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEspacio5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio6, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                    .addComponent(lblEspacio7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        panelEspacioMemoria2Layout.setVerticalGroup(
            panelEspacioMemoria2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEspacioMemoria2Layout.createSequentialGroup()
                .addGroup(panelEspacioMemoria2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelEspacioMemoria2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelEspacioMemoria2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(lblEspacio1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEspacio2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblEspacio3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEspacio4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblEspacio5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblEspacio6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(lblEspacio7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(lblEspacio8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblEspacio9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEspacio10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        lblEspacio11.setText("0MB");
        lblEspacio11.setToolTipText("");

        lblEspacio12.setText("0MB");
        lblEspacio12.setToolTipText("");

        lblEspacio13.setText("0MB");
        lblEspacio13.setToolTipText("");

        lblEspacio14.setText("0MB");
        lblEspacio14.setToolTipText("");

        lblEspacio15.setText("0MB");

        lblEspacio16.setText("0MB");

        lblEspacio17.setText("0MB");

        lblEspacio18.setText("0MB");

        lblEspacio19.setText("0MB");

        lblEspacio20.setText("0MB");
        lblEspacio20.setMaximumSize(new java.awt.Dimension(37, 20));
        lblEspacio20.setMinimumSize(new java.awt.Dimension(37, 20));

        javax.swing.GroupLayout panelEspacioMemoria3Layout = new javax.swing.GroupLayout(panelEspacioMemoria3);
        panelEspacioMemoria3.setLayout(panelEspacioMemoria3Layout);
        panelEspacioMemoria3Layout.setHorizontalGroup(
            panelEspacioMemoria3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEspacioMemoria3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEspacioMemoria3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEspacio15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio16, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(lblEspacio17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEspacio13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelEspacioMemoria3Layout.setVerticalGroup(
            panelEspacioMemoria3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEspacioMemoria3Layout.createSequentialGroup()
                .addComponent(lblEspacio11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio12, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEspacio13, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEspacio15, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblEspacio16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(lblEspacio17, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(lblEspacio18, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEspacio19, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio20, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtTamanioProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTamanioProcesoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(btnRegresarMenu)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtTamanioProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCargarProceso)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLiberarMemoria))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(lblTamanioMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(26, 26, 26)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelEspacioMemoria3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(panelEspacioMemoria1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(panelEspacioMemoria2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTamanioMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTamanioProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCargarProceso)
                            .addComponent(btnLiberarMemoria))
                        .addGap(55, 55, 55)
                        .addComponent(btnRegresarMenu))
                    .addComponent(panelEspacioMemoria2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(panelEspacioMemoria1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelEspacioMemoria3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(95, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //SELECCIÓN DE AJUSTES CON RADIOBOTONES
    private void rdbPrimerAjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbPrimerAjusteActionPerformed
        // TODO add your handling code here:
        rdbMejorAjuste.setSelected(false);
        rdbSiguienteAjuste.setSelected(false);
    }//GEN-LAST:event_rdbPrimerAjusteActionPerformed

    private void rdbMejorAjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbMejorAjusteActionPerformed
        // TODO add your handling code here:
        rdbPrimerAjuste.setSelected(false);
        rdbSiguienteAjuste.setSelected(false);
    }//GEN-LAST:event_rdbMejorAjusteActionPerformed

    private void rdbSiguienteAjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbSiguienteAjusteActionPerformed
        // TODO add your handling code here:
        rdbPrimerAjuste.setSelected(false);
        rdbMejorAjuste.setSelected(false);
    }//GEN-LAST:event_rdbSiguienteAjusteActionPerformed

    //CARGAR PROCESO
    private void btnCargarProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarProcesoActionPerformed
        // TODO add your handling code here:

        procesoCarga = Integer.parseInt(txtTamanioProceso.getText());

        if (txtTamanioProceso.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Por favor digite la carga del proceso a ingresar.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        //if (procesoCarga > 60) {
        //    JOptionPane.showMessageDialog(null, "El tamaño del proceso excede la capacidad.", "Error", JOptionPane.ERROR_MESSAGE);
        //}
        if (rdbPrimerAjuste.isSelected()) {

            if (procesosTotales <= 256) {
                if (jProgressBar1.getValue() == 0 && lblEspacio1.getText() == "") {
                    jProgressBar1.setVisible(true);
                    jProgressBar1.setMinimum(0);
                    jProgressBar1.setMaximum(procesoCarga);
                    jProgressBar1.setValue(procesoCarga);
                    ultimoEspacioCargado = 1;

                    lblEspacio1.setVisible(true);
                    lblEspacio1.setText(txtTamanioProceso.getText());
                    procesosTotales = Integer.parseInt(lblEspacio1.getText());

                } else if (jProgressBar2.getValue() == 0 && lblEspacio2.getText() == "") {
                    jProgressBar2.setVisible(true);
                    jProgressBar2.setMinimum(0);
                    jProgressBar2.setMaximum(procesoCarga);
                    jProgressBar2.setValue(procesoCarga);
                    ultimoEspacioCargado = 2;

                    lblEspacio2.setVisible(true);
                    lblEspacio2.setText(txtTamanioProceso.getText());
                    procesosTotales = Integer.parseInt(lblEspacio2.getText());
                }
            }

        } else if (rdbMejorAjuste.isSelected()) {
            if (procesoCarga >= 1 && procesoCarga <= 16 && jProgressBar4.getValue() < 1) {
                jProgressBar4.setValue(procesoCarga);
                ultimoEspacioCargado = 4;
                lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 16 && jProgressBar5.getValue() < 1) {
                jProgressBar5.setValue(procesoCarga);
                ultimoEspacioCargado = 5;
                lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 20 && jProgressBar6.getValue() < 1) {
                jProgressBar6.setValue(procesoCarga);
                ultimoEspacioCargado = 8;
                lblEspacio10.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 24 && jProgressBar1.getValue() < 1) {
                jProgressBar1.setValue(procesoCarga);
                ultimoEspacioCargado = 1;
                lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 30 && jProgressBar5.getValue() < 1) {
                jProgressBar5.setValue(procesoCarga);
                ultimoEspacioCargado = 7;
                lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 40 && jProgressBar2.getValue() < 1) {
                jProgressBar2.setValue(procesoCarga);
                ultimoEspacioCargado = 2;
                lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 50 && jProgressBar4.getValue() < 1) {
                jProgressBar4.setValue(procesoCarga);
                ultimoEspacioCargado = 6;
                lblEspacio9.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 60 && jProgressBar3.getValue() < 1) {
                jProgressBar3.setValue(procesoCarga);
                ultimoEspacioCargado = 3;
                lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else if (rdbSiguienteAjuste.isSelected()) {
            switch (ultimoEspacioCargado) {
                case 8:
                    if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio9.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio10.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 1:
                    if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio9.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio10.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 2:
                    if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio9.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio10.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 3:
                    if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio9.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio10.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 4:
                    if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio9.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio10.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 5:
                    if (jProgressBar4.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio9.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio10.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 6:
                    if (jProgressBar5.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio10.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio9.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 7:
                    if (jProgressBar6.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio10.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio9.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                default:
                    JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
            }

        }

    }//GEN-LAST:event_btnCargarProcesoActionPerformed

    private void btnLiberarMemoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberarMemoriaActionPerformed
        // TODO add your handling code here:
        jProgressBar1.setValue(0);
        lblEspacio5.setText("0MB");

        jProgressBar2.setValue(0);
        lblEspacio4.setText("0MB");

        jProgressBar3.setValue(0);
        lblEspacio6.setText("0MB");

        jProgressBar4.setValue(0);
        lblEspacio7.setText("0MB");

        jProgressBar5.setValue(0);
        lblEspacio8.setText("0MB");

        jProgressBar4.setValue(0);
        lblEspacio9.setText("0MB");

        jProgressBar5.setValue(0);
        lblEspacio7.setText("0MB");

        jProgressBar6.setValue(0);
        lblEspacio10.setText("0MB");
    }//GEN-LAST:event_btnLiberarMemoriaActionPerformed

    private void btnRegresarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarMenuActionPerformed
        // TODO add your handling code here:
        Menu menuPrincipal = new Menu();
        menuPrincipal.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnRegresarMenuActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //panelEspacioMemoria1.setVisible(false);
        //panelEspacioMemoria2.setVisible(false);
        //panelEspacioMemoria3.setVisible(false);

        jProgressBar1.setVisible(false);
        jProgressBar2.setVisible(false);
        jProgressBar3.setVisible(false);
        jProgressBar4.setVisible(false);
        jProgressBar5.setVisible(false);
        jProgressBar6.setVisible(false);
        jProgressBar7.setVisible(false);
        jProgressBar8.setVisible(false);
        jProgressBar9.setVisible(false);
        jProgressBar10.setVisible(false);

        lblEspacio1.setVisible(false);
        lblEspacio2.setVisible(false);
        lblEspacio3.setVisible(false);
        lblEspacio4.setVisible(false);
        lblEspacio5.setVisible(false);
        lblEspacio6.setVisible(false);
        lblEspacio7.setVisible(false);
        lblEspacio8.setVisible(false);
        lblEspacio9.setVisible(false);
        lblEspacio10.setVisible(false);
        lblEspacio11.setVisible(false);
        lblEspacio12.setVisible(false);
        lblEspacio13.setVisible(false);
        lblEspacio14.setVisible(false);
        lblEspacio15.setVisible(false);
        lblEspacio16.setVisible(false);
        lblEspacio17.setVisible(false);
        lblEspacio18.setVisible(false);
        lblEspacio19.setVisible(false);
        lblEspacio20.setVisible(false);
    }//GEN-LAST:event_formWindowOpened

    private void txtTamanioProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTamanioProcesoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTamanioProcesoActionPerformed

    private void btnLiberar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar1ActionPerformed
        // TODO add your handling code here:
        jProgressBar1.setValue(0);
        lblEspacio1.setText("0MB");
    }//GEN-LAST:event_btnLiberar1ActionPerformed

    private void btnLiberar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar2ActionPerformed
        // TODO add your handling code here:
        jProgressBar2.setValue(0);
        lblEspacio2.setText("0MB");
    }//GEN-LAST:event_btnLiberar2ActionPerformed

    private void btnLiberar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar3ActionPerformed
        // TODO add your handling code here:
        jProgressBar3.setValue(0);
        lblEspacio3.setText("0MB");
    }//GEN-LAST:event_btnLiberar3ActionPerformed

    private void btnLiberar4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar4ActionPerformed
        // TODO add your handling code here:
        jProgressBar4.setValue(0);
        lblEspacio4.setText("0MB");
    }//GEN-LAST:event_btnLiberar4ActionPerformed

    private void btnLiberar5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar5ActionPerformed
        // TODO add your handling code here:
        jProgressBar5.setValue(0);
        lblEspacio5.setText("0MB");
    }//GEN-LAST:event_btnLiberar5ActionPerformed

    private void btnLiberar6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar6ActionPerformed
        // TODO add your handling code here:
        jProgressBar6.setValue(0);
        lblEspacio6.setText("0MB");
    }//GEN-LAST:event_btnLiberar6ActionPerformed

    private void btnLiberar7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar7ActionPerformed
        // TODO add your handling code here:
        jProgressBar7.setValue(0);
        lblEspacio7.setText("0MB");
    }//GEN-LAST:event_btnLiberar7ActionPerformed

    private void btnLiberar8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar8ActionPerformed
        // TODO add your handling code here:
        jProgressBar8.setValue(0);
        lblEspacio8.setText("0MB");
    }//GEN-LAST:event_btnLiberar8ActionPerformed

    private void btnLiberar9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLiberar9ActionPerformed

    private void btnLiberar10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLiberar10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MemoriaDinamica2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MemoriaDinamica2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MemoriaDinamica2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MemoriaDinamica2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MemoriaDinamica2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarProceso;
    private javax.swing.JButton btnLiberar1;
    private javax.swing.JButton btnLiberar10;
    private javax.swing.JButton btnLiberar2;
    private javax.swing.JButton btnLiberar3;
    private javax.swing.JButton btnLiberar4;
    private javax.swing.JButton btnLiberar5;
    private javax.swing.JButton btnLiberar6;
    private javax.swing.JButton btnLiberar7;
    private javax.swing.JButton btnLiberar8;
    private javax.swing.JButton btnLiberar9;
    private javax.swing.JButton btnLiberarMemoria;
    private javax.swing.JButton btnRegresarMenu;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar10;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JProgressBar jProgressBar3;
    private javax.swing.JProgressBar jProgressBar4;
    private javax.swing.JProgressBar jProgressBar5;
    private javax.swing.JProgressBar jProgressBar6;
    private javax.swing.JProgressBar jProgressBar7;
    private javax.swing.JProgressBar jProgressBar8;
    private javax.swing.JProgressBar jProgressBar9;
    private javax.swing.JLabel lblEspacio1;
    private javax.swing.JLabel lblEspacio10;
    private javax.swing.JLabel lblEspacio11;
    private javax.swing.JLabel lblEspacio12;
    private javax.swing.JLabel lblEspacio13;
    private javax.swing.JLabel lblEspacio14;
    private javax.swing.JLabel lblEspacio15;
    private javax.swing.JLabel lblEspacio16;
    private javax.swing.JLabel lblEspacio17;
    private javax.swing.JLabel lblEspacio18;
    private javax.swing.JLabel lblEspacio19;
    private javax.swing.JLabel lblEspacio2;
    private javax.swing.JLabel lblEspacio20;
    private javax.swing.JLabel lblEspacio3;
    private javax.swing.JLabel lblEspacio4;
    private javax.swing.JLabel lblEspacio5;
    private javax.swing.JLabel lblEspacio6;
    private javax.swing.JLabel lblEspacio7;
    private javax.swing.JLabel lblEspacio8;
    private javax.swing.JLabel lblEspacio9;
    private javax.swing.JLabel lblTamanioMemoria;
    private javax.swing.JPanel panelEspacioMemoria1;
    private javax.swing.JPanel panelEspacioMemoria2;
    private javax.swing.JPanel panelEspacioMemoria3;
    private javax.swing.JRadioButton rdbMejorAjuste;
    private javax.swing.JRadioButton rdbPrimerAjuste;
    private javax.swing.JRadioButton rdbSiguienteAjuste;
    private javax.swing.JTextField txtTamanioProceso;
    // End of variables declaration//GEN-END:variables
}
