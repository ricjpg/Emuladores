/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.emuladores;

import javax.swing.JOptionPane;

/**
 *
 * @author Edwin
 */
public class MemoriaDinamica extends javax.swing.JFrame {

    public int procesoCarga;
    public int ultimoEspacioCargado = 8;

    /**
     * Creates new form MemoriaDinámica
     */
    public MemoriaDinamica() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        txtTamanioMemoria = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnCargarProceso = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        panelEspacioMemoria1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        jProgressBar3 = new javax.swing.JProgressBar();
        jProgressBar4 = new javax.swing.JProgressBar();
        jProgressBar5 = new javax.swing.JProgressBar();
        jProgressBar6 = new javax.swing.JProgressBar();
        jProgressBar7 = new javax.swing.JProgressBar();
        jProgressBar8 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        rdbPrimerAjuste = new javax.swing.JRadioButton();
        rdbMejorAjuste = new javax.swing.JRadioButton();
        rdbSiguienteAjuste = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        panelEspacioMemoria = new javax.swing.JPanel();
        lblEspacio1_24 = new javax.swing.JLabel();
        lblEspacio2_40 = new javax.swing.JLabel();
        lblEspacio3_60 = new javax.swing.JLabel();
        lblEspacio4_16 = new javax.swing.JLabel();
        lblEspacio5_16 = new javax.swing.JLabel();
        lblEspacio6_50 = new javax.swing.JLabel();
        lblEspacio7_30 = new javax.swing.JLabel();
        lblEspacio8_20 = new javax.swing.JLabel();
        panelEspacioMemoria2 = new javax.swing.JPanel();
        lblEspacio1 = new javax.swing.JLabel();
        lblEspacio2 = new javax.swing.JLabel();
        lblEspacio3 = new javax.swing.JLabel();
        lblEspacio4 = new javax.swing.JLabel();
        lblEspacio5 = new javax.swing.JLabel();
        lblEspacio6 = new javax.swing.JLabel();
        lblEspacio7 = new javax.swing.JLabel();
        lblEspacio8 = new javax.swing.JLabel();
        btnRegresarMenu = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnLiberar1 = new javax.swing.JButton();
        btnLiberar2 = new javax.swing.JButton();
        btnLiberar3 = new javax.swing.JButton();
        btnLiberar4 = new javax.swing.JButton();
        btnLiberar5 = new javax.swing.JButton();
        btnLiberar6 = new javax.swing.JButton();
        btnLiberar7 = new javax.swing.JButton();
        btnLiberar8 = new javax.swing.JButton();
        btnLiberarMemoria = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(873, 546));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Memoria Dinámica");

        btnCargarProceso.setText("Cargar");
        btnCargarProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarProcesoActionPerformed(evt);
            }
        });

        jLabel3.setText("Tamaño de la memoria");

        jLabel4.setText("256 MB");

        jLabel5.setText("Cargar proceso");

        javax.swing.GroupLayout panelEspacioMemoria1Layout = new javax.swing.GroupLayout(panelEspacioMemoria1);
        panelEspacioMemoria1.setLayout(panelEspacioMemoria1Layout);
        panelEspacioMemoria1Layout.setHorizontalGroup(
            panelEspacioMemoria1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEspacioMemoria1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEspacioMemoria1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelEspacioMemoria1Layout.setVerticalGroup(
            panelEspacioMemoria1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEspacioMemoria1Layout.createSequentialGroup()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rdbPrimerAjuste.setSelected(true);
        rdbPrimerAjuste.setText("Primer ajuste");
        rdbPrimerAjuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbPrimerAjusteActionPerformed(evt);
            }
        });

        rdbMejorAjuste.setText("Mejor ajuste");
        rdbMejorAjuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbMejorAjusteActionPerformed(evt);
            }
        });

        rdbSiguienteAjuste.setText("Siguiente ajuste");
        rdbSiguienteAjuste.setToolTipText("");
        rdbSiguienteAjuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbSiguienteAjusteActionPerformed(evt);
            }
        });

        jLabel6.setText("Elegir particionamiento");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rdbPrimerAjuste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(94, 94, 94))
                            .addComponent(rdbMejorAjuste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rdbSiguienteAjuste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(88, 88, 88))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdbPrimerAjuste)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbMejorAjuste)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdbSiguienteAjuste)
                .addContainerGap())
        );

        lblEspacio1_24.setText("24MB");

        lblEspacio2_40.setText("40MB");

        lblEspacio3_60.setText("60MB");

        lblEspacio4_16.setText("16MB");

        lblEspacio5_16.setText("16MB");

        lblEspacio6_50.setText("50MB");

        lblEspacio7_30.setText("30MB");

        lblEspacio8_20.setText("20MB");
        lblEspacio8_20.setMaximumSize(new java.awt.Dimension(37, 20));
        lblEspacio8_20.setMinimumSize(new java.awt.Dimension(37, 20));

        javax.swing.GroupLayout panelEspacioMemoriaLayout = new javax.swing.GroupLayout(panelEspacioMemoria);
        panelEspacioMemoria.setLayout(panelEspacioMemoriaLayout);
        panelEspacioMemoriaLayout.setHorizontalGroup(
            panelEspacioMemoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblEspacio3_60, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio2_40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio1_24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio4_16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio5_16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio6_50, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio7_30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio8_20, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );
        panelEspacioMemoriaLayout.setVerticalGroup(
            panelEspacioMemoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEspacioMemoriaLayout.createSequentialGroup()
                .addComponent(lblEspacio1_24, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio2_40, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio3_60, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio4_16, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio5_16, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio6_50, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio7_30, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio8_20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        lblEspacio1.setText("0MB");

        lblEspacio2.setText("0MB");
        lblEspacio2.setToolTipText("");

        lblEspacio3.setText("0MB");

        lblEspacio4.setText("0MB");

        lblEspacio5.setText("0MB");

        lblEspacio6.setText("0MB");

        lblEspacio7.setText("0MB");

        lblEspacio8.setText("0MB");
        lblEspacio8.setMaximumSize(new java.awt.Dimension(37, 20));
        lblEspacio8.setMinimumSize(new java.awt.Dimension(37, 20));

        javax.swing.GroupLayout panelEspacioMemoria2Layout = new javax.swing.GroupLayout(panelEspacioMemoria2);
        panelEspacioMemoria2.setLayout(panelEspacioMemoria2Layout);
        panelEspacioMemoria2Layout.setHorizontalGroup(
            panelEspacioMemoria2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblEspacio3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblEspacio8, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
        );
        panelEspacioMemoria2Layout.setVerticalGroup(
            panelEspacioMemoria2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEspacioMemoria2Layout.createSequentialGroup()
                .addComponent(lblEspacio1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEspacio8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnRegresarMenu.setLabel("Regresar");
        btnRegresarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarMenuActionPerformed(evt);
            }
        });

        btnLiberar1.setText("Liberar");
        btnLiberar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar1ActionPerformed(evt);
            }
        });

        btnLiberar2.setText("Liberar");
        btnLiberar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar2ActionPerformed(evt);
            }
        });

        btnLiberar3.setText("Liberar");
        btnLiberar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar3ActionPerformed(evt);
            }
        });

        btnLiberar4.setText("Liberar");
        btnLiberar4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar4ActionPerformed(evt);
            }
        });

        btnLiberar5.setText("Liberar");
        btnLiberar5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar5ActionPerformed(evt);
            }
        });

        btnLiberar6.setText("Liberar");
        btnLiberar6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar6ActionPerformed(evt);
            }
        });

        btnLiberar7.setText("Liberar");
        btnLiberar7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar7ActionPerformed(evt);
            }
        });

        btnLiberar8.setText("Liberar");
        btnLiberar8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberar8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLiberar1)
                    .addComponent(btnLiberar2)
                    .addComponent(btnLiberar3)
                    .addComponent(btnLiberar4)
                    .addComponent(btnLiberar5)
                    .addComponent(btnLiberar6)
                    .addComponent(btnLiberar7)
                    .addComponent(btnLiberar8))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(btnLiberar1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLiberar2)
                .addGap(29, 29, 29)
                .addComponent(btnLiberar3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLiberar4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLiberar5)
                .addGap(18, 18, 18)
                .addComponent(btnLiberar6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLiberar7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLiberar8)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        btnLiberarMemoria.setText("LiberarMemoria");
        btnLiberarMemoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiberarMemoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(btnRegresarMenu)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtTamanioMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCargarProceso)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnLiberarMemoria))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(jLabel4)))
                                .addGap(26, 26, 26)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelEspacioMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelEspacioMemoria1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(panelEspacioMemoria2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(jLabel1)))
                .addContainerGap(1227, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTamanioMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCargarProceso)
                            .addComponent(btnLiberarMemoria))
                        .addGap(47, 47, 47)
                        .addComponent(btnRegresarMenu))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(panelEspacioMemoria1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(panelEspacioMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panelEspacioMemoria2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(468, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnCargarProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarProcesoActionPerformed
        // TODO add your handling code here:

        procesoCarga = Integer.parseInt(txtTamanioMemoria.getText());
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(24);

        jProgressBar2.setMinimum(0);
        jProgressBar2.setMaximum(40);

        jProgressBar3.setMinimum(0);
        jProgressBar3.setMaximum(60);

        jProgressBar4.setMinimum(0);
        jProgressBar4.setMaximum(16);

        jProgressBar5.setMinimum(0);
        jProgressBar5.setMaximum(16);

        jProgressBar6.setMinimum(0);
        jProgressBar6.setMaximum(50);

        jProgressBar7.setMinimum(0);
        jProgressBar7.setMaximum(30);

        jProgressBar8.setMinimum(0);
        jProgressBar8.setMaximum(20);

        if (txtTamanioMemoria.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Por favor digite la carga del proceso a ingresar.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (procesoCarga > 60) {
            JOptionPane.showMessageDialog(null, "El tamaño del proceso excede la capacidad.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (rdbPrimerAjuste.isSelected()) {

            if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                jProgressBar1.setValue(procesoCarga);
                ultimoEspacioCargado = 1;
                lblEspacio1.setText(txtTamanioMemoria.getText() + "MB");

            } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                jProgressBar2.setValue(procesoCarga);
                ultimoEspacioCargado = 2;
                lblEspacio2.setText(txtTamanioMemoria.getText() + "MB");

            } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                jProgressBar3.setValue(procesoCarga);
                ultimoEspacioCargado = 3;
                lblEspacio3.setText(txtTamanioMemoria.getText() + "MB");

            } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                jProgressBar4.setValue(procesoCarga);
                ultimoEspacioCargado = 4;
                lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

            } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                jProgressBar5.setValue(procesoCarga);
                ultimoEspacioCargado = 5;
                lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

            } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 50) {
                jProgressBar6.setValue(procesoCarga);
                ultimoEspacioCargado = 6;
                lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

            } else if (jProgressBar7.getValue() < 1 && procesoCarga <= 30) {
                jProgressBar7.setValue(procesoCarga);
                ultimoEspacioCargado = 7;
                lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

            } else if (jProgressBar8.getValue() < 1 && procesoCarga <= 20) {
                jProgressBar8.setValue(procesoCarga);
                ultimoEspacioCargado = 8;
                lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else if (rdbMejorAjuste.isSelected()) {
            if (procesoCarga >= 1 && procesoCarga <= 16 && jProgressBar4.getValue() < 1) {
                jProgressBar4.setValue(procesoCarga);
                ultimoEspacioCargado = 4;
                lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 16 && jProgressBar5.getValue() < 1) {
                jProgressBar5.setValue(procesoCarga);
                ultimoEspacioCargado = 5;
                lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 20 && jProgressBar8.getValue() < 1) {
                jProgressBar8.setValue(procesoCarga);
                ultimoEspacioCargado = 8;
                lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 24 && jProgressBar1.getValue() < 1) {
                jProgressBar1.setValue(procesoCarga);
                ultimoEspacioCargado = 1;
                lblEspacio1.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 30 && jProgressBar7.getValue() < 1) {
                jProgressBar7.setValue(procesoCarga);
                ultimoEspacioCargado = 7;
                lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 40 && jProgressBar2.getValue() < 1) {
                jProgressBar2.setValue(procesoCarga);
                ultimoEspacioCargado = 2;
                lblEspacio2.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 50 && jProgressBar6.getValue() < 1) {
                jProgressBar6.setValue(procesoCarga);
                ultimoEspacioCargado = 6;
                lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 60 && jProgressBar3.getValue() < 1) {
                jProgressBar3.setValue(procesoCarga);
                ultimoEspacioCargado = 3;
                lblEspacio3.setText(txtTamanioMemoria.getText() + "MB");

            } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else if (rdbSiguienteAjuste.isSelected()) {
            switch (ultimoEspacioCargado) {
                case 8:
                    if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio1.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio2.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio3.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar7.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar7.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar8.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar8.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 1:
                    if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio2.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio3.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar7.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar7.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar8.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar8.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio1.setText(txtTamanioMemoria.getText() + "MB");
                        
                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 2:
                    if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio3.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar7.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar7.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar8.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar8.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio1.setText(txtTamanioMemoria.getText() + "MB");
                        
                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio2.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 3:
                    if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar7.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar7.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar8.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar8.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio1.setText(txtTamanioMemoria.getText() + "MB");
                        
                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio2.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio3.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 4:
                    if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar7.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar7.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar8.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar8.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio1.setText(txtTamanioMemoria.getText() + "MB");
                        
                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio2.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio3.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 5:
                    if (jProgressBar6.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar7.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar7.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar8.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar8.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio1.setText(txtTamanioMemoria.getText() + "MB");
                        
                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio2.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio3.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 6:
                    if (jProgressBar7.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar7.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar8.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar8.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio1.setText(txtTamanioMemoria.getText() + "MB");
                        
                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio2.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio3.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 7:
                    if (jProgressBar8.getValue() < 1 && procesoCarga <= 20) {
                        jProgressBar8.setValue(procesoCarga);
                        ultimoEspacioCargado = 8;
                        lblEspacio8.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar1.getValue() < 1 && procesoCarga <= 24) {
                        jProgressBar1.setValue(procesoCarga);
                        ultimoEspacioCargado = 1;
                        lblEspacio1.setText(txtTamanioMemoria.getText() + "MB");
                        
                    } else if (jProgressBar2.getValue() < 1 && procesoCarga <= 40) {
                        jProgressBar2.setValue(procesoCarga);
                        ultimoEspacioCargado = 2;
                        lblEspacio2.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar3.getValue() < 1 && procesoCarga <= 60) {
                        jProgressBar3.setValue(procesoCarga);
                        ultimoEspacioCargado = 3;
                        lblEspacio3.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar4.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar4.setValue(procesoCarga);
                        ultimoEspacioCargado = 4;
                        lblEspacio4.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar5.getValue() < 1 && procesoCarga <= 16) {
                        jProgressBar5.setValue(procesoCarga);
                        ultimoEspacioCargado = 5;
                        lblEspacio5.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar6.getValue() < 1 && procesoCarga <= 50) {
                        jProgressBar6.setValue(procesoCarga);
                        ultimoEspacioCargado = 6;
                        lblEspacio6.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (jProgressBar7.getValue() < 1 && procesoCarga <= 30) {
                        jProgressBar7.setValue(procesoCarga);
                        ultimoEspacioCargado = 7;
                        lblEspacio7.setText(txtTamanioMemoria.getText() + "MB");

                    } else if (procesoCarga >= 1 && procesoCarga <= 60) {
                        JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                default:
                    JOptionPane.showMessageDialog(null, "No se puede subir este proceso por falta de espacio.", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
            }

        }


    }//GEN-LAST:event_btnCargarProcesoActionPerformed

    private void rdbPrimerAjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbPrimerAjusteActionPerformed
        // TODO add your handling code here:
        rdbMejorAjuste.setSelected(false);
        rdbSiguienteAjuste.setSelected(false);
    }//GEN-LAST:event_rdbPrimerAjusteActionPerformed

    private void rdbMejorAjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbMejorAjusteActionPerformed
        // TODO add your handling code here:
        rdbPrimerAjuste.setSelected(false);
        rdbSiguienteAjuste.setSelected(false);
    }//GEN-LAST:event_rdbMejorAjusteActionPerformed

    private void rdbSiguienteAjusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbSiguienteAjusteActionPerformed
        // TODO add your handling code here:
        rdbPrimerAjuste.setSelected(false);
        rdbMejorAjuste.setSelected(false);
    }//GEN-LAST:event_rdbSiguienteAjusteActionPerformed

    private void btnRegresarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarMenuActionPerformed
        // TODO add your handling code here:
        Menu menuPrincipal = new Menu();
        menuPrincipal.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnRegresarMenuActionPerformed

    private void btnLiberar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar1ActionPerformed
        // TODO add your handling code here:
        jProgressBar1.setValue(0);
        lblEspacio1.setText("0MB");
    }//GEN-LAST:event_btnLiberar1ActionPerformed

    private void btnLiberar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar2ActionPerformed
        // TODO add your handling code here:
        jProgressBar2.setValue(0);
        lblEspacio2.setText("0MB");
    }//GEN-LAST:event_btnLiberar2ActionPerformed

    private void btnLiberar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar3ActionPerformed
        // TODO add your handling code here:
        jProgressBar3.setValue(0);
        lblEspacio3.setText("0MB");
    }//GEN-LAST:event_btnLiberar3ActionPerformed

    private void btnLiberar4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar4ActionPerformed
        // TODO add your handling code here:
        jProgressBar4.setValue(0);
        lblEspacio4.setText("0MB");
    }//GEN-LAST:event_btnLiberar4ActionPerformed

    private void btnLiberar5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar5ActionPerformed
        // TODO add your handling code here:
        jProgressBar5.setValue(0);
        lblEspacio5.setText("0MB");
    }//GEN-LAST:event_btnLiberar5ActionPerformed

    private void btnLiberar6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar6ActionPerformed
        // TODO add your handling code here:
        jProgressBar6.setValue(0);
        lblEspacio6.setText("0MB");
    }//GEN-LAST:event_btnLiberar6ActionPerformed

    private void btnLiberar7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar7ActionPerformed
        // TODO add your handling code here:
        jProgressBar7.setValue(0);
        lblEspacio7.setText("0MB");
    }//GEN-LAST:event_btnLiberar7ActionPerformed

    private void btnLiberar8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberar8ActionPerformed
        // TODO add your handling code here:
        jProgressBar8.setValue(0);
        lblEspacio8.setText("0MB");
    }//GEN-LAST:event_btnLiberar8ActionPerformed

    private void btnLiberarMemoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiberarMemoriaActionPerformed
        // TODO add your handling code here:
        jProgressBar1.setValue(0);
        lblEspacio1.setText("0MB");
        
        jProgressBar2.setValue(0);
        lblEspacio2.setText("0MB");
        
        jProgressBar3.setValue(0);
        lblEspacio3.setText("0MB");
        
        jProgressBar4.setValue(0);
        lblEspacio4.setText("0MB");
        
        jProgressBar5.setValue(0);
        lblEspacio5.setText("0MB");
        
        jProgressBar6.setValue(0);
        lblEspacio6.setText("0MB");
        
        jProgressBar7.setValue(0);
        lblEspacio7.setText("0MB");
        
        jProgressBar8.setValue(0);
        lblEspacio8.setText("0MB");
    }//GEN-LAST:event_btnLiberarMemoriaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MemoriaDinamica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MemoriaDinamica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MemoriaDinamica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MemoriaDinamica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MemoriaDinamica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarProceso;
    private javax.swing.JButton btnLiberar1;
    private javax.swing.JButton btnLiberar2;
    private javax.swing.JButton btnLiberar3;
    private javax.swing.JButton btnLiberar4;
    private javax.swing.JButton btnLiberar5;
    private javax.swing.JButton btnLiberar6;
    private javax.swing.JButton btnLiberar7;
    private javax.swing.JButton btnLiberar8;
    private javax.swing.JButton btnLiberarMemoria;
    private javax.swing.JButton btnRegresarMenu;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JProgressBar jProgressBar3;
    private javax.swing.JProgressBar jProgressBar4;
    private javax.swing.JProgressBar jProgressBar5;
    private javax.swing.JProgressBar jProgressBar6;
    private javax.swing.JProgressBar jProgressBar7;
    private javax.swing.JProgressBar jProgressBar8;
    private javax.swing.JLabel lblEspacio1;
    private javax.swing.JLabel lblEspacio1_24;
    private javax.swing.JLabel lblEspacio2;
    private javax.swing.JLabel lblEspacio2_40;
    private javax.swing.JLabel lblEspacio3;
    private javax.swing.JLabel lblEspacio3_60;
    private javax.swing.JLabel lblEspacio4;
    private javax.swing.JLabel lblEspacio4_16;
    private javax.swing.JLabel lblEspacio5;
    private javax.swing.JLabel lblEspacio5_16;
    private javax.swing.JLabel lblEspacio6;
    private javax.swing.JLabel lblEspacio6_50;
    private javax.swing.JLabel lblEspacio7;
    private javax.swing.JLabel lblEspacio7_30;
    private javax.swing.JLabel lblEspacio8;
    private javax.swing.JLabel lblEspacio8_20;
    private javax.swing.JPanel panelEspacioMemoria;
    private javax.swing.JPanel panelEspacioMemoria1;
    private javax.swing.JPanel panelEspacioMemoria2;
    private javax.swing.JRadioButton rdbMejorAjuste;
    private javax.swing.JRadioButton rdbPrimerAjuste;
    private javax.swing.JRadioButton rdbSiguienteAjuste;
    private javax.swing.JTextField txtTamanioMemoria;
    // End of variables declaration//GEN-END:variables
}
